const s=location.pathname.split("/").slice(0,-1).join("/"),r=[s+"/_app/immutable/entry/app.DQkXjnF2.js",s+"/_app/immutable/nodes/0.DPl1u3cC.js",s+"/_app/immutable/nodes/1.DEzBqJBz.js",s+"/_app/immutable/nodes/2.BTjw-Iw5.js",s+"/_app/immutable/assets/2.BkyXR2wF.css",s+"/_app/immutable/chunks/entry.BtmUyB4K.js",s+"/_app/immutable/chunks/index.DiuNv6fT.js",s+"/_app/immutable/chunks/scheduler.W2pu3yam.js",s+"/_app/immutable/entry/start.0YiNnGJY.js"],p=[s+"/android-chrome-192x192.png",s+"/android-chrome-512x512.png",s+"/apple-touch-icon.png",s+"/bootstrap/css/bootstrap.min.css",s+"/bootstrap/js/bootstrap.min.js",s+"/browserconfig.xml",s+"/css/colors/green.css",s+"/css/font-awesome/css/font-awesome.css",s+"/css/style.css",s+"/favicon-16x16.png",s+"/favicon-32x32.png",s+"/favicon.ico",s+"/favicon.png",s+"/font-awesome/css/font-awesome.css",s+"/img/assets/cbp-loading-popup.gif",s+"/img/assets/cbp-loading.gif",s+"/img/assets/cbp-sprite.png",s+"/img/assets/contact-form-loader.gif",s+"/img/assets/gridtile.png",s+"/img/assets/gridtile_white.png",s+"/img/assets/logo.png",s+"/img/assets/marker.png",s+"/img/assets/mstile-150x150.png",s+"/img/assets/rev-loader.GIF",s+"/img/assets/timer.png",s+"/img/backgrounds/bg-1.jpg",s+"/img/backgrounds/bg-2.jpg",s+"/img/backgrounds/bg-3.jpg",s+"/img/backgrounds/bg-home-fullscreen.jpg",s+"/img/backgrounds/bg-shortcodes.jpg",s+"/img/backgrounds/bg.jpg",s+"/img/backgrounds/slide1.jpg",s+"/img/slides/slide1.jpeg",s+"/img/slides/slide1.jpg",s+"/img/slides/slide1.png",s+"/img/slides/slide2.jpeg",s+"/img/slides/slide3.jpeg",s+"/img/slides/slide4.jpeg",s+"/img/struktur/1.png",s+"/img/struktur/2.png",s+"/img/struktur/3.png",s+"/img/struktur/4.png",s+"/img/struktur/5.png",s+"/img/struktur/team-1.jpg",s+"/img/struktur/team-2.jpg",s+"/img/struktur/team-3.jpg",s+"/img/struktur/team-4.jpg",s+"/js/plugins/jquery.min.js",s+"/js/scripts.js",s+"/manifest.json",s+"/mstile-150x150.png",s+"/safari-pinned-tab.svg"],m="1711512541375",g=`cache-${m}`,o=[...r,...p];self.addEventListener("install",e=>{async function a(){await(await caches.open(g)).addAll(o)}e.waitUntil(a())});self.addEventListener("activate",e=>{async function a(){for(const i of await caches.keys())i!==g&&await caches.delete(i)}e.waitUntil(a())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function a(){const i=new URL(e.request.url),n=await caches.open(g);if(o.includes(i.pathname)){const t=await n.match(i.pathname);if(t)return t}try{const t=await fetch(e.request);if(!(t instanceof Response))throw new Error("invalid response from fetch");return t.status===200&&n.put(e.request,t.clone()),t}catch(t){const c=await n.match(e.request);if(c)return c;throw t}}e.respondWith(a())});
